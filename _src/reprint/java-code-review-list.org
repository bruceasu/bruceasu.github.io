# -*- coding: utf-8-unix; -*-
#+TITLE:       Java Code Review List
#+AUTHOR:      Bruce Asu
#+EMAIL:       bruceasu@163.com
#+DATE:        <2016-06-29 20:00>
#+filetags:    java
#+DESCRIPTION: Code Review: 整洁的代码，安全，性能，综合，静态代码分析
#+LANGUAGE:    en
#+OPTIONS:     H:7 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* 整洁的代码
#+BEGIN_EXPORT html

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="org-left" />

    <col  class="org-left" />
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">清单项目</th>
      <th scope="col" class="org-left">分类</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="org-left">使用可以表达实际意图(Intention-Revealing)的名称</td>
      <td class="org-left">有意义的名称</td>
    </tr>


    <tr>
      <td class="org-left">每一个概念只用一个词</td>
      <td class="org-left">有意义的名称</td>
    </tr>


    <tr>
      <td class="org-left">使用方案/问题领域名称</td>
      <td class="org-left">有意义的名称</td>
    </tr>


    <tr>
      <td class="org-left">类应该是比较小的!</td>
      <td class="org-left">类</td>
    </tr>


    <tr>
      <td class="org-left">函数应该是比较小的!</td>
      <td class="org-left">函数</td>
    </tr>


    <tr>
      <td class="org-left">只做一件事</td>
      <td class="org-left">函数</td>
    </tr>


    <tr>
      <td class="org-left">DRY(Don’t Repeat Yourself)原则，(拒绝重复)</td>
      <td class="org-left">函数</td>
    </tr>


    <tr>
      <td class="org-left">用代码来解释自己的做法(译者注：即代码注释)</td>
      <td class="org-left">注释</td>
    </tr>


    <tr>
      <td class="org-left">确定应用了代码格式化</td>
      <td class="org-left">格式</td>
    </tr>


    <tr>
      <td class="org-left">使用异常而不是返回码</td>
      <td class="org-left">异常</td>
    </tr>


    <tr>
      <td class="org-left">不要返回Null</td>
      <td class="org-left">异常</td>
    </tr>
  </tbody>
</table>

#+END_EXPORT
- 参考 <http://techbus.safaribooksonline.com/book/software-engineering-and-development/agile-development/9780136083238>

* 安全
#+BEGIN_EXPORT html
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
  <colgroup>
    <col  class="org-left" />

    <col  class="org-left" />
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">清单项目</th>
      <th scope="col" class="org-left">分类</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="org-left">如果不用于继承，使类为final</td>
      <td class="org-left">基础</td>
    </tr>


    <tr>
      <td class="org-left">避免重复代码</td>
      <td class="org-left">基础</td>
    </tr>


    <tr>
      <td class="org-left">权限限制：程序应该运行在保证功能正常的最小权限模式下。</td>
      <td class="org-left">基础</td>
    </tr>


    <tr>
      <td class="org-left">最小化类和成员的可访问性</td>
      <td class="org-left">基础</td>
    </tr>


    <tr>
      <td class="org-left">注释出安全相关的信息</td>
      <td class="org-left">基础</td>
    </tr>


    <tr>
      <td class="org-left">系统的输入必须检查是否有效和在允许范围内</td>
      <td class="org-left">拒绝服务(Denial of Service)</td>
    </tr>


    <tr>
      <td class="org-left">避免对于一些不寻常行为的过分日志</td>
      <td class="org-left">拒绝服务(Denial of Service)</td>
    </tr>


    <tr>
      <td class="org-left">在任何情况下都释放资源(流，连接等等)</td>
      <td class="org-left">拒绝服务(Denial of Service)</td>
    </tr>


    <tr>
      <td class="org-left">从异常中清除敏感信息(暴露文件路径，系统内部相关，配置)P</td>
      <td class="org-left">私密信息(Confidential Information)</td>
    </tr>


    <tr>
      <td class="org-left">不要把高度敏感的信息写到日志</td>
      <td class="org-left">私密信息(Confidential Information)</td>
    </tr>


    <tr>
      <td class="org-left">考虑把高度敏感的信息在使用后从内存中清除</td>
      <td class="org-left">私密信息(Confidential Information)</td>
    </tr>


    <tr>
      <td class="org-left">限制包，类，接口，方法和域的可访问性</td>
      <td class="org-left">可访问性的扩展(Accessibility Extensibility)</td>
    </tr>


    <tr>
      <td class="org-left">限制类和方法的可扩展性(通过使它为final)</td>
      <td class="org-left">可访问性的扩展(Accessibility Extensibility)</td>
    </tr>


    <tr>
      <td class="org-left">检验输入(有效的数据，大小，范围，边界情况等等)</td>
      <td class="org-left">输入检验(Input Validation)</td>
    </tr>


    <tr>
      <td class="org-left">把从不可信对象得到的输出作为输入来检验</td>
      <td class="org-left">输入检验(Input Validation)</td>
    </tr>


    <tr>
      <td class="org-left">为native方法定义包装类(而不是定义native方法为pulibc)</td>
      <td class="org-left">输入检验(Input Validation)</td>
    </tr>


    <tr>
      <td class="org-left">把从不可信对象得到的输出作为输入来对待</td>
      <td class="org-left">可变性</td>
    </tr>


    <tr>
      <td class="org-left">使public static域为final(避免调用方(caller)修改它的值)</td>
      <td class="org-left">可变性</td>
    </tr>


    <tr>
      <td class="org-left">避免暴露敏感类的构造函数</td>
      <td class="org-left">对象构造</td>
    </tr>


    <tr>
      <td class="org-left">避免安全敏感类的序列化</td>
      <td class="org-left">序列化反序列化(Serialization Deserialization)</td>
    </tr>


    <tr>
      <td class="org-left">通过序列化来保护敏感数据</td>
      <td class="org-left">序列化反序列化(Serialization Deserialization)</td>
    </tr>


    <tr>
      <td class="org-left">小心地缓存潜在的特权操作结果</td>
      <td class="org-left">序列化反序列化(Serialization Deserialization)</td>
    </tr>


    <tr>
      <td class="org-left">只有在需要的时候才使用JNI</td>
      <td class="org-left">访问限制</td>
    </tr>
  </tbody>
</table>

#+END_EXPORT

-  参考自: <http://www.oracle.com/technetwork/java/seccodeguide-139067.html>

* 性能
#+BEGIN_EXPORT html

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="org-left" />

    <col  class="org-left" />
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">清单项目</th>
      <th scope="col" class="org-left">分类</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="org-left">避免过分的同步</td>
      <td class="org-left">并发</td>
    </tr>


    <tr>
      <td class="org-left">保持同步区域比较小</td>
      <td class="org-left">并发</td>
    </tr>


    <tr>
      <td class="org-left">知道string连接的性能情况</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">避免创建不需要的对象</td>
      <td class="org-left">创建和销毁对象</td>
    </tr>
  </tbody>
</table>
#+END_EXPORT
- 参考自:<http://techbus.safaribooksonline.com/book/programming/java/9780137150021>

* 综合
(译者注：原文中的作者把checklist和category对应的列搞错了，译文中已修正)
#+BEGIN_EXPORT html
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="org-left" />

    <col  class="org-left" />
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">清单项目</th>
      <th scope="col" class="org-left">分类</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="org-left">对可以恢复的情况使用已受检异常(checked exceptions)，对于程序错误使用运行时异常(runtime exceptions)</td>
      <td class="org-left">异常</td>
    </tr>


    <tr>
      <td class="org-left">更多地使用标准异常</td>
      <td class="org-left">异常</td>
    </tr>


    <tr>
      <td class="org-left">不要忽略异常</td>
      <td class="org-left">异常</td>
    </tr>


    <tr>
      <td class="org-left">检查参数的有效性</td>
      <td class="org-left">方法</td>
    </tr>


    <tr>
      <td class="org-left">返回空数组或集合，而不是null</td>
      <td class="org-left">方法</td>
    </tr>


    <tr>
      <td class="org-left">最小化类和成员的可访问性</td>
      <td class="org-left">类和接口</td>
    </tr>


    <tr>
      <td class="org-left">在pulibc类中，使用访问器方法(accessor methods)(译者注：访问器方法即我们平常用的get/set方法)而不是public域</td>
      <td class="org-left">类和接口</td>
    </tr>


    <tr>
      <td class="org-left">最小化本地变量的范围</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">通过接口引用对象</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">遵循广泛接受的命名规则</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">避免使用finalizer</td>
      <td class="org-left">创建和销毁对象</td>
    </tr>


    <tr>
      <td class="org-left">当你重写equals时总是重写hashCode</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">总是重写toString</td>
      <td class="org-left">综合编程</td>
    </tr>


    <tr>
      <td class="org-left">使用枚举来代替int常量</td>
      <td class="org-left">枚举和注解(Annotations)</td>
    </tr>


    <tr>
      <td class="org-left">使用标记接口(marker interface)(标记接口是一种没有任何行为的接口，如JDK中的Serializable,Cloneable等)来定义类型</td>
      <td class="org-left">枚举和注解(Annotations)</td>
    </tr>


    <tr>
      <td class="org-left">对共享可变的数据使用同步访问</td>
      <td class="org-left">并发</td>
    </tr>


    <tr>
      <td class="org-left">使用executors而不是task和thread</td>
      <td class="org-left">并发</td>
    </tr>


    <tr>
      <td class="org-left">注释中描述线程安全情况</td>
      <td class="org-left">并发</td>
    </tr>


    <tr>
      <td class="org-left">存在有效的JUnit/JBehave测试用例</td>
      <td class="org-left">测试</td>
    </tr>
  </tbody>
</table>
#+END_EXPORT
-  参考自:<http://techbus.safaribooksonline.com/book/programming/java/9780137150021>

* 静态代码分析
#+BEGIN_EXPORT html
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


  <colgroup>
    <col  class="org-left" />

    <col  class="org-left" />
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">清单项目</th>
      <th scope="col" class="org-left">分类</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="org-left">查看静态代码分析器的报告来进行类的添加和修改</td>
      <td class="org-left">静态代码分析</td>
    </tr>
  </tbody>
</table>



#+END_EXPORT
