#+title: win8.1 cygwin compile avian
#+date: <2016-07-15 20:00>
#+filetags: java
#+description: win8.1 cygwin编译java轻量虚拟机avian
#+options: ^:{}

* win8.1 cygwin编译java轻量虚拟机avian

* 背景

昨天在网上看到别人用aauto写本地小程序写的很爽，我觉得如果java的jre能小
一点，凭借java庞大的第三方类库写小工具也还算不错的。本人就经常用
eclipse+一些commons包写些小工具软件。不过可惜的是只能自己用，对于没装
java环境的人来说就麻烦了。所以就去网上找到了一个轻量级java虚拟机avian。
但是在编译和安装过程中遇到了很多困难，特此记录。

* 开始编译

废话少说，先说重点。其实在这个软件的gihub首页以及清晰的讲述了安装教程，
无奈这是英文的，而且主要是自己没有过编译开源程序的经验，也没有玩过什么
msys, cygwin的linux编译环境。这次也算是当作一次练习，毕竟以前我只要遇
到需要自己编译的开源项目就敬而远之。

其实安装的难点有两个，第一个在这个博客中已经一语道破了。win32/64文件夹
要和avian的解压文件夹并列。我一直以为要合并着来着，官网也没有特殊说明，
本人也没有玩过linux命令行，所以。。不说多了说多了都是泪。

第二个就是cygwin的安装。这个的安装注定是要折腾的，虽然网上到处都是教程，
但是问题是这些教程有很多细节都没有明说啊，也饶了不少远路。除了一般教程
都说的要按照的binutils、gcc、gcc-mingw、gdb之外，还要安装make,zlib(第
一次安装我照着教程装忘记装avian需要的make了，吐血。)。这都是32位的，如
果你要安装64位的则还有make, gcc-mingw-g++, mingw64-i686-gcc-g++,
mingw64-x86\_64-gcc-g++， mingw64-x86\_64-zlib（这几个其实avian官网有介
绍，但是没有介绍zlib。因为是写在中间，所以我也是后来才看到的，这排版真
心不科学。）反正我电脑是64位的，所以我这几个都安装了，避免出现任何问题。

环境装好了，然后需要的就是照着官网的教程敲命令了。

这里以32位为例。因为在64位下可以编译32位的，但是编译成64位的就不能在32
位运行了。

#+BEGIN_EXAMPLE
    # 官网是下载win64，我们全部改成win32。不过那个官网的git地址有问题，自己
    # 去github下载zip复制也行
    $ git clone https://github.com/ReadyTalk/win32.git ../win32
    $ export JAVA_HOME="/cygdrive/c/Program Files/Java/jdk1.7.0_45"
    # 这里需要注意，没有指定编译环境默认就是本机环境，如果电脑是64位的，那么
    # 之前你下载的win32头文件会冲突，所以必须指定为i386,如果你是想编译64位
    # 的，则之前的git clone就应该是64位的
    $ make platform=windows arch=i386
    # 这个测试程序运行成功就代表编译成功了。
    $ build/windows-i386/avian -cp build/windows-i386/test Hello
#+END_EXAMPLE

　　 然后将虚拟机嵌入打包，github上有详细的教程。等我以后再整理。。

* 打包并嵌入虚拟机

#+BEGIN_EXAMPLE
    # building
    platform=windows
    #make platform=windows arch=i386/x86_64
    arch=i386
    project=Hello #project名称
    mainClass=Hello #main函数所在类

    # i686-w64-mingw32- x86_64-w64-mingw32-
    # 这个是个坑爹的地方了，官网没有详细介绍。cygwin需要安装mingw-gcc...等同已系列的文件来支持32位的编译
    # 如果是32位编译，则ar,gcc,g++,dlltool,strip 要加前缀i686-w64-mingw32-
    # 如果是64位编译，则要加前缀x86_64-w64-mingw32-

    cd /cygdrive/d/java/avian/avian #转到avian的安装目录
    export JAVA_HOME=/cygdrive/d/Java/jdk1.7.0_17

    # 第一次需要通过make指令编译avian，如不指定平台，默认就是本地平台。
    # 注:在shell中\是换行的意思
    # make platform=${platform} arch=${arch}

    # Embedding
    # 在嵌入之前，需要通过eclipse编写一个
    mkdir ../projects/${project}
    cd ../projects/${project}
    i686-w64-mingw32-ar x ../../avian/build/${platform}-${arch}/libavian.a
    # cp ../../avian/build/${platform}-${arch}/classpath.jar boot.jar

    cat >Hello.java <<EOF
    public class Hello {
      public static void main(String[] args) {
        System.out.println("hello, world!");
      }
    }
    EOF
    javac -bootclasspath boot.jar Hello.java
    #jar u0f boot.jar Hello.class
     ../../avian/build/${platform}-${arch}/binaryToObject/binaryToObject boot.jar boot-jar.o _binary_boot_jar_start _binary_boot_jar_end ${platform} ${arch}
    cat >embedded-jar-main.cpp <<EOF
    #include "stdint.h"
    #include "jni.h"
    #include "stdlib.h"

    #if (defined __MINGW32__) || (defined _MSC_VER)
    #  define EXPORT __declspec(dllexport)
    #else
    #  define EXPORT __attribute__ ((visibility("default"))) \
      __attribute__ ((used))
    #endif

    #if (! defined __x86_64__) && ((defined __MINGW32__) || (defined _MSC_VER))
    #  define SYMBOL(x) binary_boot_jar_##x
    #else
    #  define SYMBOL(x) _binary_boot_jar_##x
    #endif

    extern "C" {

      extern const uint8_t SYMBOL(start)[];
      extern const uint8_t SYMBOL(end)[];

      EXPORT const uint8_t*
      bootJar(unsigned* size)
      {
        *size = SYMBOL(end) - SYMBOL(start);
        return SYMBOL(start);
      }

    } // extern "C"

    extern "C" void __cxa_pure_virtual(void) { abort(); }

    int
    main(int ac, const char** av)
    {
      JavaVMInitArgs vmArgs;
      vmArgs.version = JNI_VERSION_1_2;
      vmArgs.nOptions = 1;
      vmArgs.ignoreUnrecognized = JNI_TRUE;

      JavaVMOption options[vmArgs.nOptions];
      vmArgs.options = options;

      options[0].optionString = const_cast<char*>("-Xbootclasspath:[bootJar]");

      JavaVM* vm;
      void* env;
      JNI_CreateJavaVM(&vm, &env, &vmArgs);
      JNIEnv* e = static_cast<JNIEnv*>(env);

      jclass c = e->FindClass("${mainClass}");
      if (not e->ExceptionCheck()) {
        jmethodID m = e->GetStaticMethodID(c, "main", "([Ljava/lang/String;)V");
        if (not e->ExceptionCheck()) {
          jclass stringClass = e->FindClass("java/lang/String");
          if (not e->ExceptionCheck()) {
            jobjectArray a = e->NewObjectArray(ac-1, stringClass, 0);
            if (not e->ExceptionCheck()) {
              for (int i = 1; i < ac; ++i) {
                e->SetObjectArrayElement(a, i-1, e->NewStringUTF(av[i]));
              }

              e->CallStaticVoidMethod(c, m, a);
            }
          }
        }
      }

      int exitCode = 0;
      if (e->ExceptionCheck()) {
        exitCode = -1;
        e->ExceptionDescribe();
      }

      vm->DestroyJavaVM();

      return exitCode;
    }
    EOF

    i686-w64-mingw32-g++ -fno-exceptions -fno-rtti -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/win32" -D_JNI_IMPLEMENTATION_ -c embedded-jar-main.cpp -o main.o

    i686-w64-mingw32-dlltool -z ${project}.def *.o
    i686-w64-mingw32-dlltool -d ${project}.def -e ${project}.exp
    i686-w64-mingw32-gcc ${project}.exp *.o -L../../win32/lib -lmingwthrd -lz -lws2_32 \
        -lIphlpapi -mwindows -mconsole -o ${project}.exe
    i686-w64-mingw32-strip --strip-all ${project}.exe
#+END_EXAMPLE

eclipse工程需要去除jre
，然后引入avian/build/windows-xxx/classpath.jar,导出runnable jar包.

导出之后复制到项目目录中，更名为boot.jar.然后把命令清单复制到cygwin的
命令行窗口执行就行了

* swt配置

在avian的官网有swt的zip包，网上也有介绍，不过安装时需要注意的是jar包里
面只能有一个dll文件，多了貌似会冲突。
